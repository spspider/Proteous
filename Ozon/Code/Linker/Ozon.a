;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.4 Standard
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 29.04.2013
;Author  :
;Company :
;Comments:
;
;
;Chip type           : ATmega8
;Program type        : Application
;Clock frequency     : 1,000000 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 001C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001D // Place your code here
; 0000 001E 
; 0000 001F }
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;
;// Timer 1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0023 {
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0024 // Place your code here
; 0000 0025 PORTD^=0b00000001;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0026 }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 002B {
;PCODE: $0000001C VOL: 0
; 0000 002C // Declare your local variables here
; 0000 002D 
; 0000 002E // Input/Output Ports initialization
; 0000 002F // Port B initialization
; 0000 0030 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0031 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0032 PORTB=0x00;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0033 DDRB=0x00;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0034 
; 0000 0035 // Port C initialization
; 0000 0036 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0037 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0038 PORTC=0x00;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0039 DDRC=0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 003A 
; 0000 003B // Port D initialization
; 0000 003C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 003D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 003E PORTD=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 003F DDRD=0b00000001;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0040 
; 0000 0041 // Timer/Counter 0 initialization
; 0000 0042 // Clock source: System Clock
; 0000 0043 // Clock value: 1000,000 kHz
; 0000 0044 TCCR0=0x01;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0045 TCNT0=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0046 
; 0000 0047 // Timer/Counter 1 initialization
; 0000 0048 // Clock source: System Clock
; 0000 0049 // Clock value: 0,977 kHz
; 0000 004A // Mode: Normal top=FFFFh
; 0000 004B // OC1A output: Discon.
; 0000 004C // OC1B output: Discon.
; 0000 004D // Noise Canceler: Off
; 0000 004E // Input Capture on Falling Edge
; 0000 004F // Timer 1 Overflow Interrupt: On
; 0000 0050 // Input Capture Interrupt: Off
; 0000 0051 // Compare A Match Interrupt: Off
; 0000 0052 // Compare B Match Interrupt: Off
; 0000 0053 TCCR1A=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0054 TCCR1B=0x05;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0055 TCNT1H=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0056 TCNT1L=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0057 ICR1H=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0058 ICR1L=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0059 OCR1AH=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 005A OCR1AL=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 005B OCR1BH=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 005C OCR1BL=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 005D 
; 0000 005E // Timer/Counter 2 initialization
; 0000 005F // Clock source: System Clock
; 0000 0060 // Clock value: Timer 2 Stopped
; 0000 0061 // Mode: Normal top=FFh
; 0000 0062 // OC2 output: Disconnected
; 0000 0063 ASSR=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0064 TCCR2=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0065 TCNT2=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0066 OCR2=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0067 
; 0000 0068 // External Interrupt(s) initialization
; 0000 0069 // INT0: Off
; 0000 006A // INT1: Off
; 0000 006B MCUCR=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 006C 
; 0000 006D // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 006E TIMSK=0x05;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 006F 
; 0000 0070 // Analog Comparator initialization
; 0000 0071 // Analog Comparator: Off
; 0000 0072 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0073 ACSR=0x80;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0074 SFIOR=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0075 
; 0000 0076 // Global enable interrupts
; 0000 0077 #asm("sei")
;PCODE: $00000051 VOL: 0
	sei
;PCODE: $00000052 VOL: 0
; 0000 0078 
; 0000 0079 while (1)
;PCODE: $00000053 VOL: 0
; 0000 007A       {
; 0000 007B       // Place your code here
; 0000 007C 
; 0000 007D       };
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 007E }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
